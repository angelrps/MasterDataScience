setwd("C:/Users/usuario/AppData/Local/Packages/CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc/LocalState/rootfs/home/angelrps/git/MasterDataScience/200124_R_Import_Collection_Of_Data")
setwd("C:/Users/usuario/AppData/Local/Packages/CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc/LocalState/rootfs/home/angelrps/git/MasterDataScience/200124_R_Import_Collection_Of_Data")
2*2
871*0.19
871*1.19
871*1.21
precio<-871*1.21
v1<-"Hola"
v2<-TRUE
v3="Hola"
871*
2
8*
n<-8
n<-8
n+2
((n+2)*3)-6
(((n+2)*3)-6)/3
c(1,2,3,4,5,6)
dado <- c(1,2,3,4,5,6)
dado <- 1:6
length(dado)
is.numeric(dado)
class(dado0)
class(dado)
dado*2
dado/2
dado+2
dado/dado
dado%*%dado
#esto es un comentario
moneda<-c(1,2)
moneda+dado
Dado<-c(1,2,3)
Dado<-c(1L,2L,3L)
typeof(Dado)
text<-c("Hello", "Bye")
typeof(text)
v2<- 2-1
v2<- 2<1
dado<3
mano<c("rey_bastos", "rey_de_oros", "as de oros", "as de copas", "7 de espadas")
mano<-c("rey_bastos", "rey_de_oros", "as_de oros", "as de copas", "7 de espadas")
mano<-c("rey_bastos", "rey_de_oros", "as_de_oros", "as_de_copas", "7_de_espadas")
mano<-c("rey_bastos", "rey_de_oros", "as_de_oros", "as_de_copas")
dado<3
sum(dado<3)
#byrow para que rellene por fila. T es TRUE
matrix(dado,nrow = 2, byrow = T)
#array me crea un vector de la dimension que queramos
array(c(11:14,21:24,31:34), dim = c(2,3,3))
dado[1]
text[1]
mat[1,22]
mat[1,2]
mat<-matrix(dado,nrow=2, byrow=T)
mat[1,2]
mat[1,]
mat[1,c(1,2,3)]
dado<3
dado[dado<3]
p<-data.frame(triunfo=c("as", "sota","caballo", "rey"), puntos=c(10,2,3,4))
gender<-factor("M","F","F","M")
gender1<-c("M","F","F","M")
p$triunfo[1]
p$puntos[1]
p
p$triunfo[1]
p$puntos[1]
list1=list(100:130, "R", list(TRUE,FALSE))
list1[[1]]
list1[[2]]
list1[[3]]
baraja.list<-(carta=c(1:7,10,11,12),
palo=c("oros","copas","espadas","bastos"),
puntos=c(0,2,3,4,10,11)
)
baraja.list<-(carta=c(1:7,10,11,12),
palo=c("oros","copas","espadas","bastos"),
puntos=c(0,2,3,4,10,11))
baraja.list<-(carta=c(1:7,10,11,12),
palo=c("oros","copas","espadas","bastos"),
puntos=c(0,2,3,4,10,11))
baraja.list<-(carta=c(1:7,10,11,12),palo=c("oros","copas","espadas","bastos"),puntos=c(0,2,3,4,10,11))
baraja.list<-list(carta=c(1:7,10,11,12),palo=c("oros","copas","espadas","bastos"),puntos=c(0,2,3,4,10,11))
baraja.list<-list(carta=c(1:7,10,11,12),palo=c("oros","copas","espadas","bastos"),puntos=c(0,2,3,4,10,11))
baraja_list
baraja_list<-list(carta=c(1:7,10,11,12),palo=c("oros","copas","espadas","bastos"),puntos=c(0,2,3,4,10,11))
baraja_list
? rep
p
baraja_list<-list(carta=c(1:7,10,11,12),
palo=c("oros","copas","espadas","bastos"),
puntos=c(11,0,10,rep(0,4),2,3,4))
baraja_list
? rep
p
puntos=rep(baraja_list$puntos,4))
baraja_dataframe<-data.frame(carta=rep(baraja_list$carta,4),palo=c(rep(baraja_list$palo,each=10),puntos=rep(baraja_list$puntos,4))
puntos=rep(baraja_list$puntos,4))
baraja_dataframe<-data.frame(carta=rep(baraja_list$carta,4),palo=c(rep(baraja_list$palo,each=10),puntos=rep(baraja_list$puntos,4))
baraja_dataframe<-data.frame(carta=rep(baraja_list$carta,4),palo=c(rep(baraja_list$palo,each=10),puntos=rep(baraja_list$puntos,4))
baraja_dataframe<-data.frame(carta=rep(baraja_list$carta,4),palo=c(rep(baraja_list$palo,each=10),puntos=rep(baraja_list$puntos,4))
View(baraja_dataframe)
View(baraja_dataframe)
baraja_dataframe<-data.frame(carta=rep(baraja_list$carta,4),palo=c(rep(baraja_list$palo,each=10),puntos=rep(baraja_list$puntos,4))
View(baraja_dataframe)
baraja_dataframe<-data.frame(carta=rep(baraja_list$carta,4),
palo=c(rep(baraja_list$palo,each=10)),
puntos=rep(baraja_list$puntos,4))
View(baraja_dataframe)
sum(baraja_dataframe_$puntos)
sum(baraja_dataframe$puntos)
sum(baraja_dataframe$puntos)
baraja_dataframe[1,]
baraja_dataframe[1,2]
baraja_dataframe[1,c(2,3)]
#selecciona sólo los ases
baraja_dataframe[baraja_dataframe$carta==1]
#selecciona sólo los ases
baraja_dataframe[baraja_dataframe$carta==1,]
lr<-baraja_dataframe$carta==1
which(lr)
return(dado[1])
throw<-function(){
return(dado[1])
}
throw()
t1<-throw()
return(sample(dado[1]))
return(sample(dado,1))
return(sample(dado,1))
throw<-function(){
return(sample(dado,1))
}
throw()
throw2(dado)
throw2<-function(x){
return(sample(x,1))
}
throw2(dado)
throw2(dado)
return(sample(dado,1))
throw3-function(){
dado<-7:12
return(sample(dado,1))
}
throw3-function(){
dado<-7:12
return(sample(dado,1))
}
throw3<-function(){
dado<-7:12
return(sample(dado,1))
}
deal()
deal<-function(){
return(baraja_dataframe[1,])
}
deal()
deal(baraja_dataframe)
deal<-function(x){
return(x[1,])
}
deal(baraja_dataframe)
dealAndShuffle<-function(x){
return(x[sample(c(1:40),1)])
}
dealAndShuffle(baraja_dataframe)
return(x[sample(c(1:40),1),])
return(x[sample(c(1:40),])
}
dealAndShuffle(baraja_dataframe)
return(x[sample(c(1:40),1),])
dealAndShuffle<-function(x){
return(x[sample(c(1:40),1),])
}
dealAndShuffle(baraja_dataframe)
shuffle<-function(x){
return(x[sample(c(1:40),40)])
}
shuffle(baraja_dataframe)
? sample
shuffle<-function(x){
return(x[sample(c(1:40),40)])
}
shuffle(baraja_dataframe)
dealAndShuffle<-function(x){return(x[sample(1:40,1),])}
dealAndShuffle(baraja_dataframe)
shuffle<-function(x){return(x[sample(1:40,40)])}
shuffle(baraja_dataframe)
shuffle<-function(x){return(x[sample(1:40,40),])}
shuffle(baraja_dataframe)
baraja_new<-shuffle(baraja_dataframe)
deal(baraja_new)
deal(baraja_new)
deal(baraja_new)
baraja_new<-shuffle(baraja_dataframe)
deal(baraja_new)
baraja_new<-shuffle(baraja_dataframe)
deal(baraja_new)
baraja_df2$puntos[baraja_df2$carta==1]<-0
baraja_df2<-baraja_dataframe
baraja_df2$puntos[baraja_df2$carta==1]<-0
baraja_dataframe$carta==1 && baraja_dataframe$palo=="oros"
baraja_dataframe[baraja_dataframe$carta==1 && baraja_dataframe$palo=="oros"]
baraja_dataframe[which(baraja_dataframe$carta==1 && baraja-_dataframe$palo=="oros"),]
baraja_dataframe[which(baraja_dataframe$carta==1 && baraja_dataframe$palo=="oros"),]
? mtcars
data(mtcars)
View(mtcars)
? mtcars
View(mtcars)
str(mtcars)
#cuantos modelos tenían 4 cilindros y qué modelos eran
df=mtcars&cyl==4
#cuantos modelos tenían 4 cilindros y qué modelos eran
mtcars&cyl==4
#cuantos modelos tenían 4 cilindros y qué modelos eran
mtcars$cyl==4
#cuantos modelos tenían 4 cilindros y qué modelos eran
mtcars[mtcars$cyl==4]
#cuantos modelos tenían 4 cilindros y qué modelos eran
mtcars[mtcars$cyl==4]
#cuantos modelos tenían 4 cilindros y qué modelos eran
mtcars$cyl[mtcars$cyl==4]
#cuantos modelos tenían 4 cilindros y qué modelos eran
mtcars[[mtcars$cyl==4],]
#cuantos modelos tenían 4 cilindros y qué modelos eran
sum([mtcars$cyl==4])
#cuantos modelos tenían 4 cilindros y qué modelos eran
sum(mtcars$cyl==4)
length(which(mtcars$cyl==4))
#y qué modelos son?
mtcars[mtcars$cyl==4]
#y qué modelos son?
mtcars[mtcars$cyl==4,]
#cuáles tienen 4 cilindros y además transmisión automática
mtcars$cyl==4
mtcars$am==0
#cuáles tienen 4 cilindros y además transmisión automática
mtcars$cyl==4 && mtcars$am==0
mtcars[mtcars$cyl==4 && mtcars$am==0,]
mtcars[mtcars$cyl==4 & mtcars$am==0,]
baraja_dataframe$carta==1 & baraja_dataframe$palo=="oros"
baraja_dataframe[which(baraja_dataframe$carta==1 & baraja_dataframe$palo=="oros"),]
#cuáles tienen 4 cilindros y además transmisión automática
mtcars[mtcars$cyl==4 & mtcars$am==0,]
#cuál sería el consumo medio de los coches de más de cuatro cilindros y que tienen transmisión automáticas
#querremos hacer la media de miles per galo (mpg)
mean(mtcars$mpg[mtcars$cyl>4 & mtcars$am==0])

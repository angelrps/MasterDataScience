p <- ggplot(gapminder,aes(x = gdp, y=life_expectancy, size = population, colour = country)) +
geom_point(show.legend = TRUE, alpha = 0.7) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy") +
transition_time(year) +
labs(title = "Year: {frame_time}")
p #+ transition_time(year)
?data
? library
####################################################################
# gif2
####################################################################
library(dslabs) # aqui se encuentra el dataset gapminder
data(gapminder)
library(ggplot2)
library(gganimate)
View(gapminder)
p <- ggplot(gapminder,aes(x = gdp, y=life_expectancy, size = population, colour = country)) +
geom_point(show.legend = TRUE, alpha = 0.7) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy") +
transition_time(year) +
labs(title = "Year: {frame_time}")
p #+ transition_time(year)
p <- ggplot(gapminder,aes(x = gdp, y=life_expectancy, size = population, colour = country)) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy") +
transition_time(year) +
labs(title = "Year: {frame_time}")
p #+ transition_time(year)
p <- ggplot(gapminder,aes(x = gdp, y=life_expectancy, size = population, colour = country)) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy") +
transition_time(year) +
labs(title = "Year: {frame_time}")
p #+ transition_time(year)
p <- ggplot(gapminder,aes(x = gdp, y=life_expectancy, size = population, colour = country)) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy") +
#transition_time(year) +
#labs(title = "Year: {frame_time}")
p #+ transition_time(year)
p <- ggplot(gapminder,aes(x = gdp, y=life_expectancy, size = population, colour = country)) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy")
#transition_time(year) +
#labs(title = "Year: {frame_time}")
p #+ transition_time(year)
#################################################
#       MOTIVATIONAl EXAMPLE: GAPMINDER
#################################################
library(dslabs)
library(dplyr)
library(ggplot2)
library(tidyverse)
tidy_data<-gapminder %>%
filter(country %in% c("South Korea","Germany","United States"))%>%
select(country,year,fertility)
data(gapminder)
head(tidy_data)
tidy_data %>%
ggplot(aes(year,fertility,color=country))+geom_line()
# pasarlo a wide_data: pivot_wider
wide_data<-tidy_data %>% pivot_wider(names_from=year,values_from = fertility)
head(wide_data)
# pasarlo a tidy otra vez: pivot_longer
tidy_data <- wide_data %>% pivot_longer(-country,names_to="year",values_to = "fertility")
head(tidy_data)
# si los nombres de las columnas son numericos
billboard
billboard %>%
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
values_to = "rank",
values_drop_na = TRUE)
##Ahora queremos convertir la variable semana en numerica
billboard %>%
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
names_prefix = "wk",
names_ptypes = list(week = integer()),
values_to = "rank",
values_drop_na = TRUE,
)
# Variables dentro de los nombres de columna
who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = c("diagnosis", "gender", "age"),
names_pattern = "new_?(.*)_(.)(.*)",
values_to = "count"
)
who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = c("diagnosis", "gender", "age"),
names_pattern = "new_?(.*)_(.)(.*)",
names_ptypes = list(
gender = factor(levels = c("f", "m")),
age = factor(
levels = c("014", "1524", "2534", "3544", "4554", "5564", "65"),
ordered = TRUE
)
),
values_to = "count"
)
anscombe
anscombe %>%
pivot_longer(everything(),
names_to = c(".value", "set"),
names_pattern = "(.)(.)"
)
tidy_data %>%
ggplot(aes(year,fertility,color=country))+geom_line()
tidy_data<-gapminder %>%
filter(country %in% c("South Korea","Germany","United States"))%>%
select(country,year,fertility)
head(tidy_data)
tidy_data %>%
ggplot(aes(year,fertility,color=country))+geom_line()
library(dslabs)
library(tidyverse)
x <- rnorm(3000, 0, 10)
summary(x)
sd(x)
var(x)
mean(x)
summary(x)
# media
mean(x)
# varianza
var(x)
# desviación típica
sd(x)
#################
# FUNCIÓN QUE CALCULA LA MODA
######################
v <- c(1, 2, 3, 4, 1, 2, 1)
uniqv
getmode <- function(
uniqv <- unique(v)
)
getmode <- function{
uniqv <- unique(v)
}
getmode <- function{
uniqv <- unique(v)
}
getmode <- function{
uniqv <- unique(v)
}
######################
#################
# FUNCIÓN QUE CALCULA LA MODA
######################
v <- c(1, 2, 3, 4, 1, 2, 1)
getmode <- function{
uniqv <- unique(v)
tabulate(match(v, uniqv))
}
getmode <-function{
uniqv <- unique(v)
tabulate(match(v, uniqv))
}
which.max(tabulate(match(v, uniqv)))
getmode<-function(v){
uniqv<-unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(v)
v1 <- c("data", "science", "data", "machine")
getmode(v1)
max(tabulate(match(v, uniqv)))
#################
# FUNCIÓN QUE CALCULA LA MODA
######################
v <- c(1, 2, 3, 4, 1, 2)
max(tabulate(match(v, uniqv)))
tabulate(match(v, uniqv))
uniqv[tabulate(match(v, uniqv))==max(tabulate(match(v, uniqv)))]
# quantile() permite calcular cualquier cuantil.
quantile(x, probs = c(0.12,0.34,0.65)
# quantile() permite calcular cualquier cuantil.
quantile(x, probs = c(0.12,0.34,0.65))
# quantile() permite calcular cualquier cuantil.
quantile(x, probs = c(0.12,0.34,0.65))
?getmod
par(mfrow=c(1,1))
hit(x)
hist(x)
par(mfrow=c(1,2))
hist(x)
hist(x, probs = T)
par(mfrow=c(1,1)) # par parte la pantalla plot para ver mas cosas....
hist(x)
hist(x, probs = T)
hist(x, probs = T)
hist(x, prob = T)
lines(density(x), col="red", lwd=2)
install.packages(("plotty"))
install.packages(("plotly"))
library(plotly)
library(plotly)
plot_ly(x=~x, type="histogram")
y=rnorm(length(x), 0,1)
boxplot(data.frame(x,y))
plot_ly((y=~x, type="box"))
plot_ly(y=~x, type="box")
plot_ly(y=~x, type="box") %>%
add_trace(y=~y)
b=rnorm(length(x), 0,1)
plot_ly(y=~x, type="box") %>%
add_trace(y=~b)
plot_ly(x=~x, type="box") %>%
add_trace(x=~b)
################################################
# distribucion binomial, tienen 2 parámetros
# n = numero de casos
# x las veces que sucede
dbinom(2,10,0.2)
?dbinom
################################################
# distribucion binomial, tienen 2 parámetros
# n = numero de casos
# x las veces que sucede
dbinom(2,6,0.2)
qnorm(0.68, 0,1)
? qnorm
rnom(mean=110, sd=4)
rnom(1000,mean=110, sd=4)
rnom(1000,110, 4)
rnorm(1000,110, 4)
?pnorm
pnorm(0.5,mean=110, 4)
pnorm(0.5,110, 4)
pnorm(0,110, 4)
pnorm(115,110, 4) - pnorm(110,110, 4)
1 - pnorm(105,110,4)
pnorm(100,110,4)
# longitud minima de long del 20% que más miden
qnorm(0.8, 11, 4)
# longitud minima de long del 20% que más miden
qnorm(0.8, 110, 4)
pbinom(0,5,0.8)
pbinom(0,5,0.8)
pbinom(0,1,0.8)
pbinom(0,5,0.8)
# calcula que las 5 calculadoara esten en servicios 3 años mas tarde
pbinom(5,5,0.8)
dbinom(0,5,0.8)
# calcula que las 5 calculadoara esten en servicios 3 años mas tarde
binom(5,5,0.8)
# calcula que las 5 calculadoara esten en servicios 3 años mas tarde
dbinom(5,5,0.8)
# dos calculadoraas a lo sumo es´ten fuera de servicio
pbinom(2,5,0.2)
pbinom(4,5,0.2) - pbinom(1,5,0.2)
dbinom(2, 5, 0.8) + dbinom(3, 5, 0.8) +dbinom(4, 5, 0.8)
# punto e) del ejercicio
pbinom(4,5,0.2) - pbinom(2,5,0.2)
head(iris)
attach(iris)
# tipificar la variable
Sepal.Length.tip<-(Sepal.Length - mean(Sepal.Length))/sd(Sepal.Length)
# tipificar la variable
Sepal.Length.tip<-(Sepal.Length - mean(Sepal.Length))/sd(Sepal.Length)
sd(Sepal.Length.tip)
mean(Sepal.Length.tip)
# BOX COX
# precargar estas librerías
library(MASS)
# BOX COX
# precargar estas librerías
library(MASS)
library(e1071)
library(forecast)
install.packages("e1071")
install.packages("forecast")
library(e1071)
library(forecast)
Boston
v <- sapply(df, class)=="numeric"
?sapply
df <- Boston
# la funcion de box cox solo se puede hacer sobre variables numéricas
# las convierto en numericas
v <- df[sapply(df, class)=="numeric"]
names(v)
?skewness
ii=1
for (ii in 1:length(v)){
# calculamos la simetria para cada una de las variables con skewness()
asimetria<-skewness(v[ii])
}
asimetria<-skewness(df[,v[ii]])
# la funcion de box cox solo se puede hacer sobre variables numéricas
# las convierto en numericas
v <- names(df[sapply(df, class)=="numeric"])
names(v)
ii=1
for (ii in 1:length(v)){
# calculamos la simetria para cada una de las variables con skewness()
asimetria<-skewness(df[,v[ii]])
}
df <- Boston
# la funcion de box cox solo se puede hacer sobre variables numéricas
# las convierto en numericas
v <- names(df[sapply(df, class)=="numeric",])
names(v)
ii=1
for (ii in 1:length(v)){
# calculamos la simetria para cada una de las variables con skewness()
asimetria<-skewness(df[,v[ii]])
}
df <- Boston
# la funcion de box cox solo se puede hacer sobre variables numéricas
# las convierto en numericas
v <- names(df[sapply(df, class)=="numeric",])
names(v)
skewness(df[,v[ii]]
names(v)
df <- Boston
# la funcion de box cox solo se puede hacer sobre variables numéricas
# las convierto en numericas
v <- names(df[sapply(df, class)=="numeric",])
names(v)
# la funcion de box cox solo se puede hacer sobre variables numéricas
# las convierto en numericas
v <- names(df[sapply(df, class)=="numeric",])
v
for (ii in 1:length(v)){
# calculamos la simetria para cada una de las variables con skewness()
asimetria<-skewness(df[,v[ii]])
}
puntos <- seq(0,10)
puntos
# creamos una distribución uniforme
runif(100,0,1)
# creamos una distribución uniforme entre 0 y 1
x <- runif(100,0,1)
hist(x, breaks = puntos)
# creamos un experimento llamado puntos
puntos <- seq(0,10)/10
# creamos una distribución uniforme entre 0 y 1
x <- runif(100,0,1)
hist(x, breaks = puntos)
# creamos una distribución uniforme entre 0 y 1
x <- runif(100000,0,1)
hist(x, breaks = puntos)
dado<-sample(1:6, 100, replace=T)
dado1<-sample(1:6, 100, replace=T)
dado2<-sample(1:6, 100, replace=T)
dado <- dado1 + dado2
barplot(table(dado))
dado1<-sample(1:6, 10000, replace=T)
dado2<-sample(1:6, 10000, replace=T)
dado <- dado1 + dado2
barplot(table(dado))
dado1<-sample(1:6, 100, replace=T)
dado2<-sample(1:6, 100, replace=T)
dado <- dado1 + dado2
barplot(table(dado))
# si tiramos los dados más veces se acerca más a la distribución normal
dado1<-sample(1:6, 100000, replace=T)
dado2<-sample(1:6, 100000, replace=T)
dado <- dado1 + dado2
barplot(table(dado))
sum(seq(1:6))*(1/6)
# Otro ejercicio con esperanza matemática
x1<-rnorm(10000,0,1)
x2<-rnorm(10000,0,1)
#prob de que suceda x1 y x2
px1<-dnorm(x1,0,1)
px2<-dnorm(x2,0,1)
z<-x1**2+x2**2
mean(z)
mean(x1**2)+mean(x2**2)
setwd("C:/Users/usuario/Google Drive/Data Science_KSCHOOL/Clases/200208_R_Aprendizaje_Supervisado")
summary(lm_fit_sales_TV)
library(dplyr)
advertising <- read.csv('advertising.csv', sep = ';', header = T, fileEncoding = 'utf-8')
glimpse(advertising)
summary(advertising)
pairs(advertising, col = 'red')
lm_fit_sales_TV <- lm(Sales ~ TV, data = advertising)
lm_fit_sales_TV
summary(lm_fit_sales_TV)
summary(lm_fit_sales_TV)
names(lm_fit_sales_TV)
confint(lm_fit_sales_TV, level = 0.95)
new_advertising = data.frame(TV = c(100, 150, 200, 250))
predicted_values <- predict(lm_fit_sales_TV, new_advertising, interval = 'confidence')
new_advertising <- cbind(new_advertising, predicted_values)
new_advertising
plot(advertising$TV, advertising$Sales, type = 'p', col = 'red', xlab = 'TV', ylab = 'Sales')
abline(lm_fit_sales_TV, col = 'blue')
plot(advertising$TV, lm_fit_sales_TV$residuals, type = 'p', col = 'red', xlab = 'TV', ylab = 'Sales')
install.packages("ISLR")
data(auto)
library(ISLR)
data("Auto")
data(Auto)
View(Auto)
install.packages("ISLR")
library(ISLR)
data(Auto)
View(Auto)
lm(mpg ~ horsepower, data = Auto )
#install.packages("ISLR")
#library(ISLR)
data(Auto)
View(Auto)
lm(mpg ~ horsepower, data = Auto )
#install.packages("ISLR")
#library(ISLR)
data(Auto)
# View(Auto)
lm(mpg ~ horsepower, data = Auto )
# View(Auto)
pairs(Auto, col="red")
lm(mpg ~ horsepower, data = Auto )
lm_fit_horsepower_mpg <- lm(mpg ~ horsepower, data = Auto )
summary(lm_fit_horsepower_mpg)
names(lm_fit_horsepower_mpg)
confint(lm_fit_sales_TV, level = 0.95)
confint(lm_fit_horsepower_mpg, level = 0.95)
plot(Auto$mpg, Auto$horsepower, type = 'p', col = 'red', xlab = 'TV', ylab = 'Sales')
abline(lm_fit_horsepower_mpg, col = 'blue')
#install.packages("ISLR")
#library(ISLR)
data(Auto)
# View(Auto)
pairs(Auto, col="red")
lm_fit_horsepower_mpg <- lm(mpg ~ horsepower, data = Auto )
summary(lm_fit_horsepower_mpg)
names(lm_fit_horsepower_mpg)
confint(lm_fit_horsepower_mpg, level =
confint(lm_fit_horsepower_mpg, level = 0.95)
plot(Auto$mpg, Auto$horsepower, type = 'p', col = 'red', xlab = 'mpg', ylab = 'horsepower')
#install.packages("ISLR")
#library(ISLR)
data(Auto)
# View(Auto)
pairs(Auto, col="red")
lm_fit_horsepower_mpg <- lm(mpg ~ horsepower, data = Auto )
summary(lm_fit_horsepower_mpg)
names(lm_fit_horsepower_mpg)
confint(lm_fit_horsepower_mpg, level = 0.95)
plot(Auto$mpg, Auto$horsepower, type = 'p', col = 'red', xlab = 'mpg', ylab = 'horsepower')
abline(lm_fit_horsepower_mpg, col = 'blue')
plot(Auto$mpg, Auto$horsepower, type = 'p', col = 'red', xlab = 'mpg', ylab = 'horsepower')
abline(lm_fit_horsepower_mpg, col = 'blue')
lm_fit_horsepower_mpg <- lm(mpg ~ horsepower, data = Auto )
abline(lm_fit_horsepower_mpg, col = 'blue')
plot(Auto$mpg, Auto$horsepower, type = 'p', col = 'red', xlab = 'mpg', ylab = 'horsepower')
abline(lm_fit_horsepower_mpg, col = 'blue')
plot(Auto$mpg, Auto$horsepower, type = 'p', col = 'red', xlab = 'mpg', ylab = 'horsepower')
abline(lm_fit_horsepower_mpg, col = 'blue')
plot(Auto$mpg, Auto$horsepower, type = 'p', col = 'red', xlab = 'mpg', ylab = 'horsepower')
#install.packages("ISLR")
#library(ISLR)
data(Auto)
# View(Auto)
pairs(Auto, col="red")
lm_fit_horsepower_mpg <- lm(mpg ~ horsepower, data = Auto )
summary(lm_fit_horsepower_mpg)
names(lm_fit_horsepower_mpg)
confint(lm_fit_horsepower_mpg, level = 0.95)
plot(Auto$mpg, Auto$horsepower, type = 'p', col = 'red', xlab = 'mpg', ylab = 'horsepower')
abline(lm_fit_horsepower_mpg, col = 'blue')
#install.packages("ISLR")
#library(ISLR)
data(Auto)
# View(Auto)
pairs(Auto, col="red")
lm_fit_horsepower_mpg <- lm(mpg ~ horsepower, data = Auto )
summary(lm_fit_horsepower_mpg)
names(lm_fit_horsepower_mpg)
confint(lm_fit_horsepower_mpg, level = 0.95)
plot(Auto$horsepower, Auto$mpg, type = 'p', col = 'red', xlab = 'mpg', ylab = 'horsepower')
abline(lm_fit_horsepower_mpg, col = 'blue')
cor(Auto$horsepower, Auto$mpg)
summary(lm_fit_horsepower_mpg)
View(Auto)
summary(Auto)
str(Auto)
col(Auto)
data_auto <- subset(Auto, select = -c(name))
data_auto
glimpse(data_auto)
pairs(data_auto)
pairs(data_auto, color="red")
pairs(data_auto, col="red")
install.packages("DescTools")
Desc(Auto)
library(DescTools)
Desc(Auto)
